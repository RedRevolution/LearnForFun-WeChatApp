<style lang="less">
  .page {
    position: fixed;
    height: 100vh;
    width: 100vw;
    background:#dff9fb;
  }

  .chats {
    text-align: center;
    margin: 10vh 10vh 10vw 10vw;
    height: 65vh;
    width: 80vw;
    background-color: aliceblue;
    overflow: auto;

  }

  .chatInput {
    background: aliceblue;
    height: 40rpx;
    font-size: 20rpx;
    padding: 10rpx;
    width: 70vw;
    margin-left: 15vw;
    border-radius: 20rpx;
    margin-bottom: 3vh;
  }

  .btn {
    width: 70vw;
    margin-left: 15vw;
  }

  .invite {
  /* display: none; */
  width: 250rpx;
  font-size: 25rpx;
  height: 50rpx;
  line-height: 50rpx;
  padding-left: 20rpx;
  position: relative;
  margin: 120rpx auto 0 35rpx;
  background-color: #FFF0F5;
  border: 1px solid #FFB5C5;
  border-radius: 5px;
}
.invite:after {
  content: '';
  width: 20rpx;
  height: 20rpx;
  position: absolute;
  top: -11rpx;
  left: 20rpx;
  transform: rotate(45deg);
  background-color: #FFF0F5; // #0984e3
  border: 1px #FFB5C5;
  border-style: solid none none solid ;
}
</style>
<template>
  <view class="page">
    <view class="chats">
      <repeat for="{{chats}}" item="item">
        <view style="font-size: 20rpx;color: #ababab">{{item.time}}</view>
        <view style="font-size: 25rpx;padding-bottom: 20rpx">{{item.text}}</view>
      </repeat>
    </view>
    <view class='invite'>
        这是一个气泡样式哦～
    </view>
    <view class="chatInput">
      <input placeholder="请输入聊天内容" bindinput="userSay"/>
    </view>
    <button @tap="sendMessage" size="mini" class="btn">
      发送消息
    </button>
  </view> 

</template>

<script>
  import wepy from 'wepy'
  import wxCommon from '../mixins/wxCommon'
  // 监听是否打开的状态量
  // 页面逻辑代码部分
  // 页面注释，进入这个页面的时候应当发送ajax请求，使得在列表能列出最近的群组消息和群名字
  // 点击某一个群组进去会建立websocket连接
  let socketOpen = false    //页面全局变量，默认值为false
  export default class chat extends wepy.page {
    components = {}

    mixins = []

    data = {
      say: '',
      realName: '',
      schoolNum: '',
      chats: [{
        time: '聊天开始',  // 最顶部的小字
        text: '',
        name: ''  // 用于区分是自己发的还是对方发的
      }]
    }
    mixins = [wxCommon]
    methods = {
      // 用户输入相关的内容
      userSay(e) {
        this.say = e.detail.value
        this.$apply()
      },
      // 自己发送一条消息，服务器会返回一条一样的，这个我说的就显示为右侧的气泡
      sendMessage() {
        let time = new Date()
        this.chats = this.chats.concat([{
          time: time.toLocaleTimeString(), 
          text: '我说：' + this.say,
          name: 'me'
        }])
        this.handleSendMessage()
        this.$apply()
      }
    }

    // 启动一个socket
    startSocket() {
      wepy.connectSocket({
        url: 'wss://learn.wsscloud.cn/webSocket/123456/' + this.schoolNum + '/' + this.realName
        // {groupId}/{userId}/{userName} 测试时群号暂时使用123456
        
      })
      console.log(this.realName)
    }

    // 初始化要是连接成功了应当先查收消息，所以先调用receiveMessage
    wssInit() {
      const that = this
      this.startSocket()    // 先用学号姓名建立连接，测试暂时连接可以成功
      // 链接失败显示
      wepy.onSocketError(function (res) {
        socketOpen = false
        console.log('WebSocket连接打开失败，请检查！', res.data)   //每隔两秒钟就重新发一次
        setTimeout(() => {    // 可延时回调
          that.startSocket()
        }, 2000)
      })
      // 监听连接成功
      wepy.onSocketOpen(function (res) {
        socketOpen = true                 
        console.log('WebSocket连接已打开！Res: ' + res.data)
        //  接收服务器的信息
        that.receiveMessage()
      })
    }

    // 接收服务器的消息
    receiveMessage() {
      const that = this
      if (socketOpen) {   // socketOpen在这里用到如果连接成功了才可以收发消息
        console.log('正在读取socket服务器……')
        wepy.onSocketMessage(function (res) {
          let time = new Date()
          console.log('啦啦啦收到服务器内容：', res)
          
          if (res) { // 服务器有内容不为null，那么在chats中追加一条
            // 如果服务器返回的名字是自己，那么不显示
            // res.data 为 "王珊珊: 消息前有一个空格", 所以这里需要用英文冒号切割一下字符串
            let tmpName = res.data.split(":")
            console.log('发言人名字为' + tmpName[0] + '如果是自己，则不用再在弹框中显示了')
            if (tmpName[0] != that.realName) {
              that.chats = that.chats.concat([{
                time: time.toLocaleTimeString(), 
                text: '服务器说：' + res.data,
                name: tmpName[0]
              }])
              that.$apply()     // apply之后本地变量就会被修改，那么聊天框内应该就会显示出服务器发回的消息
            }
          }
        })
      } else {
        //  未打开状态需要延时重新调用
        console.log('服务器没有连接')
        setTimeout(() => {
          that.receiveMessage()
        }, 2000)
      }
    }

    // 向服务器发送消息
    handleSendMessage() {
      const that = this
      console.log('尝试向服务器发送消息：' + that.say)
      // 要先检查是否还是连通的才可以发送消息, wx是否换成wepy
      // 链接失败显示
      wepy.onSocketError(function (res) {
        socketOpen = false
        console.log('准备向服务器发送消息时：WebSocket连接打开失败，请检查！', res.data)   //每隔两秒钟就重新发一次
        setTimeout(() => {    // 可延时回调
          that.startSocket()
        }, 2000)
      })
      // 监听连接成功 注意，这两个函数除了第一次建立连接的时候会进行，这里写起来并不会再次执行这个函数，尚无解决方法
      wepy.onSocketOpen(function (res) {
        socketOpen = true                 
        console.log('准备向服务器发送消息时：WebSocket连接已打开！', res.data)
      })
      if (socketOpen) {
        wepy.sendSocketMessage({
          data: that.say  // 短消息都是string不用json格式
        })
      }
      
      
    }

    events = {}

    // 页面加载函数启动socket连接，当连接成功后，回复socket连接成功并且调用接收服务器
    onLoad() {
      const that = this
      // onload
      that.realName = wepy.getStorageSync('realName')
      that.schoolNum = wepy.getStorageSync('schoolNum')
      // 延迟启动socket
      setTimeout(() => {
        that.wssInit() //  wepy.onSocketOpen即为连接成功，会把socketOpen变量设置为true
      }, 2000)

      // TODO: 第一次点进来的时候可以看到这个群的历史10条聊天记录，然后追加到chats这个数据里面去
      // /api/group/message/{groupId}/{count}
      // that.userRequest(
      //               '/api/group/message/123456/10' ,'get', 
      //                 {
                        
      //                 }, function(res) {
      //                     console.log('第一次进入群聊页面，展示10条聊天记录. res: ', res)
      //                     console.log(res.data)
      //                 } 
                          
      //             )

    }

    onShow(){
      const that = this
      // onload
      that.realName = wepy.getStorageSync('realName')
      that.schoolNum = wepy.getStorageSync('schoolNum')
    }

    // onHide() { 
    //   wx.closeSocket();
    // }
  }
</script>
