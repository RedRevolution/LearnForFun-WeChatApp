<style lang="less">
  .page {
    // position: fixed;
    height: 100vh;
    // width: 100vw;
    // background-color: #f7f7f7;
    box-sizing:border-box
  }

  .chats {
    text-align: center;
    // margin: 1vh 2vh 2vw 2vw;
    padding: 10rpx 5rpx 10rpx 5rpx;
    height: 80vh;
    width: auto;
    background-color:white;
    overflow: auto;
    box-sizing:border-box;

  }
 .myicon{
   position: fixed;
  top: 5px;
  right: 5px;
 }

 body {
  font-family: helvetica;
  display: flex ;
  flex-direction: column;
  align-items: center;
}

.messages {
  margin-top: 30px;
  display: flex;
  flex-direction: column;
}

.message {
  border-radius: 20px;
  padding: 8px 15px;
  margin-top: 5px;
  margin-bottom: 5px;
  display: inline-block;
  word-break:break-all;
  word-wrap:break-word;
}

.yours {
  align-items: flex-start;
  word-break:break-all;
  word-wrap:break-word;
}

.yours .message {
  margin-right: 25%;
  background-color: #eee;
  position: relative;
}

.yours .message.last:before {
  content: "";
  position: absolute;
  z-index: 0;
  bottom: 0;
  left: -7px;
  height: 20px;
  width: 20px;
  background: #eee;
  border-bottom-right-radius: 15px;
}
.yours .message.last:after {
  content: "";
  position: absolute;
  z-index: 1;
  bottom: 0;
  left: -10px;
  width: 10px;
  height: 20px;
  background: white;
  border-bottom-right-radius: 10px;
}

.mine {
  align-items: flex-end;
  word-break:break-all;
  word-wrap:break-word;
}

.mine .message {
  color: white;
  margin-left: 25%;
  // background: linear-gradient(to bottom, #00D0EA 0%, #0085D1 100%);
  background: #0085D1;
  background-attachment: fixed;
  position: relative;
}

.mine .message.last:before {
  content: "";
  position: absolute;
  z-index: 0;
  bottom: 0;
  right: -8px;
  height: 20px;
  width: 20px;
  // background: linear-gradient(to bottom, #00D0EA 0%, #0085D1 100%);
  background: #0085D1;
  background-attachment: fixed;
  border-bottom-left-radius: 15px;
}

.mine .message.last:after {
  content: "";
  position: absolute;
  z-index: 1;
  bottom: 0;
  right: -10px;
  width: 10px;
  height: 20px;
  background: white;
  border-bottom-left-radius: 10px;
}

.index{
   height: 100vh;
   width: 100vw;
}
</style>
<template>
  
  <view class="page">
    <van-button type="normal" block @tap="enterGroupInfo">查看群详情</van-button>

  
    <scroll-view class="chats" scroll-y="true" style="height:{{height-160}}px;" scroll-top="{{scrollTop}}" scroll-into-view="{{toId}}" bindscrolltoupper="onPullDownRefresh" upper-threshold="80">
      <view hidden="{{notShow}}">
      <repeat for="{{hiddenchats}}" item="item" >
        <!-- <view style="font-size: 20rpx;color: #535c68">{{item.time}}</view> -->
        
        <view wx:if="{{item.userName==realName}}">
          <view class="mine messages" >
            <text style="font-size: 20rpx;color: #535c68">{{item.createBy}}</text>
            <view class="message last">
              {{item.content}}
            </view>
          </view>
        </view>
        <view wx:elif="{{item.userName==''}}">
 
        </view>
        <view wx:else>
           <view class="yours messages" >
              <text style="font-size: 22rpx;color: #535c68">{{item.userName}} {{item.createBy}}</text>
              <view class="message last">
                {{item.content}}
              </view>
           </view>
        </view>
      </repeat>
  
    </view>
      
      <repeat for="{{chats}}" item="item" >
        <!-- <view style="font-size: 20rpx;color: #535c68">{{item.time}}</view> -->
        
        <view wx:if="{{item.userName==realName}}">
          <view class="mine messages" >
            <text style="font-size: 20rpx;color: #535c68" id="to{{item.id}}">{{item.createBy}}</text>
            <view class="message last">
              {{item.content}}
            </view>
          </view>
        </view>
        <view wx:elif="{{item.userName==''}}">
 
        </view>
        <view wx:else>
           <view class="yours messages" >
              <text style="font-size: 22rpx;color: #535c68" id="to{{item.id}}">{{item.userName}} {{item.createBy}}</text>
              <view class="message last">
                {{item.content}}
              </view>
           </view>
        </view>
      </repeat>
    </scroll-view>
    

    <!-- <van-search
      value="{{ say }}"
      use-action-slot
      background="#c8d6e5"
      bind:change="userSay"
      bind:search="sendMessage"
      left-icon="chat-o"
      shape="round"
      confirm-type="send"
    >
      <view slot="action" >发送</view>
    </van-search> -->

    <van-cell-group>
      <van-field
        value="{{ say }}"
        center
        clearable
        left-icon="chat-o"
        shape="round"
        confirm-type="send"
        type="text"
        autosize
        bind:change="userSay"
        border="{{ true }}"
        use-button-slot
        bind:confirm="sendMessage"
      >
        <van-button slot="button" size="small" type="info" @tap="sendMessage">发送</van-button>
      </van-field>
    </van-cell-group>
    
  </view> 
 


</template>

<script>
  import wepy from 'wepy'
  import wxCommon from '../mixins/wxCommon'
  // 监听是否打开的状态量
  // 页面逻辑代码部分
  // 页面注释，进入这个页面的时候应当发送ajax请求，使得在列表能列出最近的群组消息和群名字
  // 点击某一个群组进去会建立websocket连接
  let socketOpen = false    //页面全局变量，默认值为false
  export default class chat extends wepy.page {
    components = {}
    config = {
      navigationBarTitleText: '群聊',
      enablePullDownRefresh: true,
      backgroundColor: "#f0145a" 
    }
    data = {
      height:'',
      width:'',
      scrollTop:0,
      say: '',
      realName: '',
      schoolNum: '',
      groupId:'', // groupId是一个字符串，O开头官方，I开头自创
      groupName:'',
      chats: [{
        createBy: '聊天开始',  // 最顶部的小字
        content: '',
        userName: ''  // 用于区分是自己发的还是对方发的
      }],
      notShow:true,
      hiddenchats:[{
        createBy: '测试',  // 最顶部的小字
        content: '测试分割线',
        userName: '苦逼的前端er'  // 用于区分是自己发的还是对方发的
      }], // 顶部追加的聊天记录
      toId:'',
      lastMsgId:'',  // 最早消息的ID，用来在加载更多消息时请求
      hasRequestMsgId:[]
    }
    mixins = [wxCommon]
    methods = {
      // 用户输入相关的内容
      userSay(e) {
        this.say = e.detail
        console.log("此时输入的消息 = " + this.say)
        this.$apply()
        let that = this
        that.scrollTop = that.scrollTop + 1000
        that.$apply()
        console.log("输入消息，scrollTop = " + that.scrollTop)
      },
      // 自己发送一条消息，服务器会返回一条一样的，这个我说的就显示为右侧的气泡
      sendMessage() {
        if(this.say.length == 0) {
          wx.showToast({
            title: '不允许发送空消息',
            icon: 'none',
            duration: 2000
          })
        } else {
          let time = new Date()
          let that = this
          that.scrollTop =  that.scrollTop + 1000
          that.handleSendMessage()
          that.say = '' // 用于清空输入框
          that.$apply()
        }
        
      },
      enterGroupInfo(e){
        let that = this
        wx.navigateTo({ // 不能用 redirectTo
            url: '/pages/groupInfo?groupId='+that.groupId+'&groupName='+that.groupName, // ?id=2020&time=20200309
            events: {
              // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据
              acceptDataFromOpenedPage: function(data) {
                console.log(data)
              },
              someEvent: function(data) {
                console.log(data)
              }
            },
            success: function(res) {
              // 通过eventChannel向被打开页面传送数据
              res.eventChannel.emit('acceptDataFromOpenerPage', { data: 'test' })
            }
        })
      }
    }

    // 启动一个socket
    startSocket() {
      wx.connectSocket({
        url: 'wss://learn.wsscloud.cn/webSocket/' + this.groupId
        // {groupId}测试时群号暂时使用123456
        
      })
      console.log("即将启动一个socket，人员：" + this.realName)
    }

    // 初始化要是连接成功了应当先查收消息，所以先调用receiveMessage
    wssInit() {
      const that = this
      this.startSocket()    // 先用学号姓名建立连接，测试暂时连接可以成功
      // 链接失败显示
      wx.onSocketError(function (res) {
        socketOpen = false
        console.log('WebSocket连接打开失败，请检查！', res)   //每隔两秒钟就重新发一次
        setTimeout(() => {    // 可延时回调
          that.startSocket()
        }, 2000)
      })
      // 监听连接成功
      wx.onSocketOpen(function (res) {
        socketOpen = true                 
        console.log('WebSocket连接已打开！Res: ' + res)
        //  接收服务器的信息
        that.receiveMessage()
      })
    }

    // 接收服务器的消息
    receiveMessage() {
      const that = this
      if (socketOpen) {   // socketOpen在这里用到如果连接成功了才可以收发消息
        console.log('正在读取socket服务器……')
        wx.onSocketMessage(function (res) {
          console.log('啦啦啦收到服务器内容：', res)
          
          if (res) { // 服务器有内容不为null，那么在chats中追加一条
            // 如果服务器返回的名字是自己，那么不显示
            // res.data 为 "名字: 消息前有一个空格", 所以这里需要用英文冒号切割一下字符串
            let tmpName = res.data.split(":")
            console.log('发言人名字为' + tmpName[0] + '如果是自己，则不用再在弹框中显示了')
            let recContent = that.entitiesToUtf16(tmpName[1])
            that.chats = that.chats.concat([{
                createBy: that.chatFormatTime(), 
                content: recContent,
                userName: tmpName[0]
            }])
            that.$apply()
            that.scrollTop =  that.scrollTop + 1000
            that.$apply()
            console.log("输入消息，scrollTop = " + that.scrollTop)
            wepy.setStorageSync(that.groupId+"rec", JSON.stringify(that.chats))
            console.log("此时chats:" + that.chats)
            
          }
        })
      } else {
        //  未打开状态需要延时重新调用
        console.log('服务器没有连接')
        setTimeout(() => {
          that.receiveMessage()
        }, 2000)
      }
    }

    // 向服务器发送消息
    handleSendMessage() {
      const that = this
      console.log('尝试向服务器发送消息：' + that.say)
      // 尝试编码emoji
      that.say = that.utf16toEntities(that.say)
      that.$apply()




      // 要先检查是否还是连通的才可以发送消息, wx是否换成wepy
      // 链接失败显示
      wx.onSocketError(function (res) {
        socketOpen = false
        console.log('准备向服务器发送消息时：WebSocket连接打开失败，请检查！', res)   //每隔两秒钟就重新发一次
        setTimeout(() => {    // 可延时回调
          that.startSocket()
        }, 2000)
      })
      // 监听连接成功 注意，这两个函数除了第一次建立连接的时候会进行，这里写起来并不会再次执行这个函数，尚无解决方法
      wx.onSocketOpen(function (res) {
        socketOpen = true                 
        console.log('准备向服务器发送消息时：WebSocket连接已打开！', res)
      })
      if (socketOpen) {
        console.log('socket is open! 可以发送！' + that.say)
        var msg = {
            content: that.say,
            userId:that.schoolNum,
            userName:that.realName
          }
        wx.sendSocketMessage({
          // data: that.say  // 短消息都是string不用json格式
          data: JSON.stringify(msg)
        })
      }
    }

    events = {}

    async loadChatsRec(){
      // 第一次进入页面的时候加载
      let that = this
      // 向服务器请求最新20条数据 
      that.userRequest(  ///api/group/message/{groupId}/{count}
        '/api/group/message/'+that.groupId + '/500' ,'get', 
        {             
        }, async function(res) {
           console.log('获取最新20条消息记录', res.data)
           let reverse = res.data.reverse()
           that.lastMsgId = reverse[0].id
           console.log("最早一条消息id是: " + that.lastMsgId + ", 内容为: " + reverse[0].content)
           // 解码（循环解码）
           for (let i = 0; i < reverse.length; i++) {
             reverse[i].content = that.entitiesToUtf16(reverse[i].content);
           }
           that.chats = reverse
           that.$apply()
           that.scrollTop = that.scrollTop + 1000*res.data.length // 保持在最底端
           that.$apply()

           // 同时提前获取隐藏数据
           let hasRequest = that.hasRequestMsgId.indexOf(that.lastMsgId)
           if (hasRequest<0) {
              console.log("提前获取隐藏数据")
              that.hasRequestMsgId = that.hasRequestMsgId.concat(that.lastMsgId)
              that.$apply()
              that.hiddenchats = await that.getMoreMsg(that.lastMsgId)
              if (that.hiddenchats.length != 0) {
                console.log("获取到的hiddenchats是: " + that.hiddenchats)
                  that.lastMsgId = that.hiddenchats[0].id
                  that.$apply()
              }
           }
           
         } 
      )
      
    }
    async onPullDownRefresh(){
      let that = this
      // 隐藏显示
      that.notShow = false
      // 先拼接隐藏数据和chats，chats赋值为新的拼接
      // 调整toView为隐藏数据最后一条的高度
      // 获取新的隐藏数据
      

      console.log("即将请求最早一条消息 " + that.lastMsgId + "之前的10条并存放在隐藏对话里")
      // /api/group/message/{groupId}/{messageId}/{count}
      let hasRequest = that.hasRequestMsgId.indexOf(that.lastMsgId)
      if (hasRequest<0) {

          // 这里是为了保证拼接仅发生一次
          let gotoId = that.chats[0].id// 要跳转到的是隐藏的最后一条的ID

          that.chats = that.hiddenchats.concat(that.chats)
          that.$apply()

          that.notShow = true
          that.$apply()

          that.toId = "to" + gotoId
          console.log('滚到旧toId' + that.toId)
          that.$apply() 



        console.log("hasrequest = " + hasRequest)
        that.hasRequestMsgId = that.hasRequestMsgId.concat(that.lastMsgId)
        that.$apply()
        console.log("此时hasrequest数组为 " + that.hasRequestMsgId)

        let previousMsg = await that.getMoreMsg(that.lastMsgId)
        if(previousMsg.length != 0) {
          that.lastMsgId = previousMsg[0].id
          console.log("更新后最早一条消息id是: " + that.lastMsgId + ", 内容为: " + previousMsg[0].content)
          that.hiddenchats = previousMsg
          that.$apply()
        }

      } else {
        console.log("刚刚已经请求过一次了，请等待后台返回")
      }
    }

    getMoreMsg(lastMsgId){
      console.log("进入了getMoreMsg函数")
      let that = this
      var reverse = []
      return new Promise(resolve=>{
          that.userRequest(  
            '/api/group/message/'+that.groupId + '/' + lastMsgId + '/10' ,'get', 
            {             
            }, function(res) {
              console.log('获取10条消息记录', res.data)
              wx.stopPullDownRefresh()
              if (res.data.length != 0) {
                  reverse = res.data.reverse()  // 倒序数组
                  for (let i = 0; i < reverse.length; i++) {
                    reverse[i].content = that.entitiesToUtf16(reverse[i].content);
                  }
                  wx.stopPullDownRefresh()
              } else {
                  console.log('没有更早的消息记录了')
                  wx.stopPullDownRefresh()
              }
              resolve(reverse)  // 若无更早记录则返回的reverse为空数组
            } 
          )
      })
    }


    getGroupInfo(){ // /api/group/{groupId}
      let that = this
      that.userRequest(
        '/api/group/'+that.groupId ,'get', 
        {             
        }, function(res) {
           console.log('获取该群信息', res)
           wepy.setStorageSync(that.groupId, res.data)  // 全局缓存群组信息
         } 
      )
    }
    // 页面加载函数启动socket连接，当连接成功后，回复socket连接成功并且调用接收服务器
    onLoad(options) {
      const that = this
      that.height = wx.getSystemInfoSync().windowHeight
      that.width = wx.getSystemInfoSync().windowWidth
      // onload
      that.realName = wepy.getStorageSync('realName')
      that.schoolNum = wepy.getStorageSync('schoolNum')
      // 延迟启动socket
      setTimeout(() => {
        that.wssInit() //  wepy.onSocketOpen即为连接成功，会把socketOpen变量设置为true
      }, 2000)
      that.groupId = options.groupId  // 后面groupId还要用于请求websocket连接
      that.groupName = options.groupName
      wx.setNavigationBarTitle({
        title: options.groupName // 在顶部显示群名
      })
      wx.setBackgroundColor({
        backgroundColor: '#3498db', // 窗口的背景色为白色
      })
      console.log("进入了群聊！groupId为 " + this.groupId+", groupName为 " + this.groupName);  // 传进来的参数是groupId, groupName
      that.getGroupInfo() 
      that.loadChatsRec()
    }

    onShow(){
      const that = this
      // onload
      that.realName = wepy.getStorageSync('realName')
      that.schoolNum = wepy.getStorageSync('schoolNum')
      wx.setNavigationBarTitle({
        title: that.groupName 
      })
    }

    onUnload(){
      console.log("群聊页面被onUnload了，暂时关掉websocket连接")
      wx.closeSocket()

      wx.onSocketClose(function(res) {
        console.log('WebSocket 已关闭！')
      })
    }

    

  }
</script>
