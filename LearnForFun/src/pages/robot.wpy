<style lang="less">
  .page {
    // position: fixed;
    // height: 100vh;
    // width: 100vw;
    // background-color: #f7f7f7;
    box-sizing:border-box
  }

  .chats {
    text-align: center;
    // margin: 1vh 2vh 2vw 2vw;
    padding: 10rpx 5rpx 10rpx 5rpx;
    height: 80vh;
    width: auto;
    background-color:white;
    overflow: auto;
    box-sizing:border-box;

  }
 .myicon{
   position: fixed;
  top: 5px;
  right: 5px;
 }

 body {
  font-family: helvetica;
  display: flex ;
  flex-direction: column;
  align-items: center;
}

// .chat {
//   width: 300px;
//   border: solid 1px #EEE;
//   display: flex;
//   flex-direction: column;
//   padding: 10px;
// }

.messages {
  margin-top: 30px;
  display: flex;
  flex-direction: column;
}

.message {
  border-radius: 20px;
  padding: 8px 15px;
  margin-top: 5px;
  margin-bottom: 5px;
  display: inline-block;
  word-break:break-all;
  word-wrap:break-word;
}

.yours {
  align-items: flex-start;
  word-break:break-all;
  word-wrap:break-word;
}

.yours .message {
  margin-right: 25%;
  background-color: #eee;
  position: relative;
}

.yours .message.last:before {
  content: "";
  position: absolute;
  z-index: 0;
  bottom: 0;
  left: -7px;
  height: 20px;
  width: 20px;
  background: #eee;
  border-bottom-right-radius: 15px;
}
.yours .message.last:after {
  content: "";
  position: absolute;
  z-index: 1;
  bottom: 0;
  left: -10px;
  width: 10px;
  height: 20px;
  background: white;
  border-bottom-right-radius: 10px;
}

.mine {
  align-items: flex-end;
  word-break:break-all;
  word-wrap:break-word;
}

.mine .message {
  color: white;
  margin-left: 25%;
  background: linear-gradient(to bottom, #00D0EA 0%, #0085D1 100%);
  background-attachment: fixed;
  position: relative;
}

.mine .message.last:before {
  content: "";
  position: absolute;
  z-index: 0;
  bottom: 0;
  right: -8px;
  height: 20px;
  width: 20px;
  background: linear-gradient(to bottom, #00D0EA 0%, #0085D1 100%);
  background-attachment: fixed;
  border-bottom-left-radius: 15px;
}

.mine .message.last:after {
  content: "";
  position: absolute;
  z-index: 1;
  bottom: 0;
  right: -10px;
  width: 10px;
  height: 20px;
  background: white;
  border-bottom-left-radius: 10px;
}

.index{
   height: 100vh;
   width: 100vw;
}
</style>
<template>
  
  <view class="page">
    <scroll-view class="chats" scroll-y="true" style="height:{{height-100}}px;" scroll-top="{{scrollTop}}">
      <repeat for="{{chats}}" item="item" id="item{{index}}">
        <!-- <view style="font-size: 20rpx;color: #535c68">{{item.time}}</view> -->
        
        <view wx:if="{{item.name==realName}}">
          <view class="mine messages">
            <text style="font-size: 22rpx;color: #535c68">{{item.time}}</text>
            <view class="message last">
              {{item.text}}
            </view>
          </view>
        </view>
        <view wx:elif="{{item.name==''}}">
 
        </view>
        <view wx:else>
           <view class="yours messages">
              <text style="font-size: 22rpx;color: #535c68">{{item.name}} {{item.time}}</text>
              <view class="message last">
                {{item.text}}
              </view>
           </view>
        </view>
      </repeat>
  
    </scroll-view>
    
<!--     
    <view class="chatInput">
      <input placeholder="请输入聊天内容" value="{{say}}" bindinput="userSay"/>
    </view> -->
    <van-search
      value="{{ say }}"
      label="输入"
      use-action-slot
      background="#c8d6e5"
      bind:change="userSay"
    >
      <view slot="action" @tap="sendMessage">发送</view>
    </van-search>
    
  </view> 
 


</template>

<script>
  import wepy from 'wepy'
  import wxCommon from '../mixins/wxCommon'
import { transition } from '../components/vant/mixins/transition';
  
  export default class robot extends wepy.page {
    components = {}
    config = {
      navigationBarTitleText: '聊天机器人'
    }
    data = {
      height:'',
      width:'',
      scrollTop:0,
      say: '',
      realName: '',
      schoolNum: '',
      chats: [{
        time: '聊天开始',  // 最顶部的小字
        text: '',
        name: ''  // 用于区分是自己发的还是对方发的
      }],
      cache:[{
        time: '',
        text: '',
        name: ''
      }]
    }
    mixins = [wxCommon]
    methods = {
      // 用户输入相关的内容
      userSay(e) {
        this.say = e.detail
        console.log("此时输入的消息 = " + this.say)
        this.$apply()
        let that = this
        that.scrollTop = 5000
      },
      // 自己发送一条消息，服务器会返回一条一样的，这个我说的就显示为右侧的气泡
      sendMessage() {
        let that = this
        let sendmsg = that.say
        if(sendmsg.length == 0) {
          wx.showToast({
            title: '不允许发送空消息',
            icon: 'none',
            duration: 2000
          })
        } else {
        that.scrollTop =  that.scrollTop + 1000
          that.chats = that.chats.concat([{
            time: that.chatFormatTime(), 
            text: sendmsg,
            name: that.realName
          }])
          that.userRequest(
            '/api/xiaoqu/' + sendmsg ,'get',
            {

            }, function(res) {
                console.log("小趣说：" + res.data)
                that.chats = that.chats.concat([{
                    time: that.chatFormatTime(), 
                    text: res.data,
                    name: "小趣"
                }])
                that.$apply()
                that.scrollTop =  that.scrollTop + 1000
                that.$apply()
                wepy.setStorageSync("robotrec", JSON.stringify(that.chats))
                console.log("此时chats:" + that.chats)
            }
          )
          that.say = '' // 用于清空输入框
          that.$apply()
        }
        
      }
    }

   

    // 页面加载函数启动socket连接，当连接成功后，回复socket连接成功并且调用接收服务器
    onLoad(options) {
      let that = this
      that.height = wx.getSystemInfoSync().windowHeight
      that.width = wx.getSystemInfoSync().windowWidth

      that.realName = wepy.getStorageSync('realName')
      that.schoolNum = wepy.getStorageSync('schoolNum')

      let record = wepy.getStorageSync("robotrec")
      if(record) {
        let cache = JSON.parse(record)
        console.log("进入页面加载的缓存："+JSON.parse(record))
        
        that.chats = cache
        that.$apply()
      }
      
      
    }

    onShow(){
      let that = this
      // 如果是第一次进来，小趣自我介绍
      var firstTime = wepy.getStorageSync('isNewbie')
      if(firstTime == "no"){

      } else {
        // 调用自我介绍
        that.userRequest(
          '/api/xiaoqu' ,'get',//这里url后面加了code来决定请求什么，文档
          {
            
          }, function(res) {
            if(res.data) { // 返回数据分类讨论情况
               that.chats = that.chats.concat([{
                    time: that.chatFormatTime(), 
                    text: res.data,
                    name: "小趣"
                }])
                that.$apply()
                that.scrollTop =  that.scrollTop + 1000
                that.$apply()
                wepy.setStorageSync("robotrec", JSON.stringify(that.chats))
                wepy.setStorageSync('isNewbie',"no")
            } else { // 返回一个完整的User实例
                console.log("小趣的自我介绍出了点问题")
            }                
          }
        )
      }
      
    }

    onUnload(){
      
    }

  }
</script>
